<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
     xml:id="B_RGERMEISTER_Martina__Software_Aging__in_den_DH__Kritik_des">
   <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>„Software Aging“ in den DH: Kritik des reinen Forschungswillen</title>
                <author>
                    <persName>
                        <surname>Bürgermeister</surname>
                        <forename>Martina</forename>
                    </persName>
                    <affiliation>ZIM-ACDH, Universität Graz, Österreich</affiliation>
                    <email>martina.buergermeister@uni-graz.at</email>
                </author>
                <author>
                    <persName>
                        <surname>Schneider</surname>
                        <forename>Gerlinde</forename>
                    </persName>
                    <affiliation>ZIM-ACDH, Universität Graz, Österreich</affiliation>
                    <email>gerlinde.schneider@uni-graz.at</email>
                </author>
                <author>
                    <persName>
                        <surname>Makowski</surname>
                        <forename>Stephan</forename>
                    </persName>
                    <affiliation>CCeH, Universität Köln, Deutschland</affiliation>
                    <email>stephan.makowski@uni-koeln.de</email>
                </author>
                <author>
                    <persName>
                        <surname>Jeller</surname>
                        <forename>Daniel</forename>
                    </persName>
                    <affiliation>ICARUS, Wien, Österreich</affiliation>
                    <email>daniel.jeller@icar-us.eu</email>
                </author>
                <author>
                    <persName>
                        <surname>Bigalke</surname>
                        <forename>Jan</forename>
                    </persName>
                    <affiliation>CCeH, Universität Köln, Deutschland</affiliation>
                    <email>JBigalke@smail.uni-koeln.de</email>
                </author>
                <author>
                    <persName>
                        <surname>Theisen</surname>
                        <forename>Christian</forename>
                    </persName>
                    <affiliation>CCeH, Universität Köln, Deutschland</affiliation>
                    <email>ctheise1@smail.uni-koeln.de</email>
                </author>
                <author>
                    <persName>
                        <surname>Vogeler</surname>
                        <forename>Georg</forename>
                    </persName>
                    <affiliation>ZIM-ACDH, Universität Graz, Österreich</affiliation>
                    <email>georg.vogeler@uni-graz.at</email>
                </author>
            </titleStmt>
            <editionStmt>
                <edition>
                    <date>2018-01-12T11:37:00Z</date>
                </edition>
            </editionStmt>
            <publicationStmt>
            <t:publisher xmlns:t="http://www.tei-c.org/ns/1.0">Georg Vogeler, im Auftrag des Verbands Digital Humanities im deutschaprachigen Raum e.V.</t:publisher>
            <t:address xmlns:t="http://www.tei-c.org/ns/1.0">
               <t:addrLine>Universität Graz</t:addrLine>
               <t:addrLine>Zentrum für Informationsmodellierung - Austrian Centre for Digital Humanities</t:addrLine>
               <t:addrLine>Elisabethstraße 59/III</t:addrLine>
               <t:addrLine>8010 Graz</t:addrLine>
            </t:address>
         </publicationStmt>
            <sourceDesc>
                <p>Converted from a Word document </p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <appInfo>
                <application ident="DHCONVALIDATOR" version="1.17">
                    <label>DHConvalidator</label>
                </application>
            </appInfo>
        </encodingDesc>
        <profileDesc>
            <textClass>
                <keywords scheme="ConfTool" n="category">
                    <term>Paper</term>
                </keywords>
                <keywords scheme="ConfTool" n="subcategory">
                    <term>Vortrag</term>
                </keywords>
                <keywords scheme="ConfTool" n="keywords">
                    <term>Software Evolution</term>
                    <term>Software Aging</term>
                    <term>Softwarewartung</term>
                </keywords>
                <keywords scheme="ConfTool" n="topics">
                    <term>Programmierung</term>
                    <term>Webentwicklung</term>
                    <term>Forschungsergebnis</term>
                    <term>Software</term>
                </keywords>
            </textClass>
        <settingDesc>
            <ab n="conference">DHd2018 - "Kritik der Digitalen Vernunft", Köln</ab>
            <ab n="paperID">171</ab>
            <ab n="session_ID">156</ab>
            <ab n="session_numberInSession">2</ab>
            <ab n="session_short">VP_8c</ab>
            <ab n="session_title">Sofwareentwicklung in den Digitalen Geisteswissenschaften</ab>
            <ab n="session_start">2018-03-02 09:00</ab>
            <ab n="session_end">2018-03-02 10:30</ab>
         </settingDesc>
      </profileDesc>
    </teiHeader>
   <text>
        <body>
            <div type="div1" rend="DH-Heading1">
                <head>Einleitung</head>
                <p>Dieser Beitrag behandelt die Frage, warum in den DH entwickelte und angewandte Software häufig schnell altert. Jede Software altert relativ zu der Umgebung, in der sie eingesetzt wird, unabhängig von der Qualität am Beginn ihrer Verwendung (Engels et al. 2009: 393). Wandeln sich Hardware, Infrastruktur oder Anforderungen an die Software, wird sie, um weiter brauchbar zu sein, angepasst. Je nach Beschaffenheit können sich diese Anpassungen positiv, oftmals aber auch negativ auf die Lebensdauer und Fitness einer Software auswirken. </p>
                <p>Aus der Praxis behaupten wir, dass kontextuelle und inhaltliche Spezifika von DH-Software dazu führen, dass eine langfristige Lauffähigkeit und Brauchbarkeit erschwert werden. Unser Beitrag bringt allgemein die Bedeutung und Relevanz des Themas „Software Evolution“ (2) nahe, beschreibt Spezifika der Software Evolution aus der DH-Praxis (3) und zeigt welche konkreten Maßnahmen im Projekt 
                    <hi rend="italic">monasterium.net</hi> (4) dahingehend gesetzt werden. 
                </p>
            </div>
            <div type="div1" rend="DH-Heading1">
                <head>Software Evolution</head>
                <p>Software Evolution umfasst alle Aktivitäten und Prozesse, die Software verändern (Godfrey/German 2008). Änderungen der Hardware, der Infomationsübermittlung sowie der Anforderungen sind Kräfte die auf diesen Evolutionsprozess wirken. Softwareentwicklungsprozesse werden seit den 1970er Jahren definiert und systematisiert, um die Qualität von Software zu steigern. Aus dieser Zeit stammt auch das Konzept des sogenannten Software Lifecycles und die Idee, diesen Zyklus zu managen (Lehman 1980). Unterschiedliche Methoden und Techniken dazu haben sich seither für alle Phasen im Lebenslauf von Softwaresystemen etabliert. Dank der intensiven Auseinandersetzung mit der Qualitätssteigerung in der Softwareentwicklung wurden die Fehlerquoten gesenkt (Thaller 2000: 6). Hochwertige Software ist nicht nur (nahezu) fehlerfrei, sondern auch kompatibel zur ihrer Umgebung. Verläuft die Evolution einer Software nicht in diesem Sinne, spricht man vom „Software Aging“ beziehungsweise sogar von deren Verfall (Parnas 1994). Demeyer et al. (2013: 4f.) fassen die Symptome veralteter Software wie folgt zusammen: Unvollständige oder keine Dokumentation, fehlende Tests, Ausstieg ursprünglicher Entwickler, verlorengegangenes Insiderwissen, fehlender Überblick über Gesamtsystem, zeitintensive Anpassungen, ständige Fehlerkorrekturen und Wartung damit verbundener Abhängigkeiten, lange „Build“-Zeiten und schlechter Code.</p>
                <p>Parnas (1994: 280) erkennt zwei Hauptfaktoren für das Altern von Software. „Lack of movement“, also keine Änderungen an der Software vorzunehmen, und „Ignorant surgery“: Aus der Praxis weiß man, dass bei dringenden Korrekturen am Programmcode, die formale Kriterien für gute Software oftmals nicht eingehalten werden. Ein Beispiel ist das unreflektierte Copy-and-paste aus 
                    <hi rend="italic">Stack Overflow</hi>
                    <ref target="ftn1" n="1"/>. Kurzfristige werden den besten Lösungen vorgezogen. Derartige Eingriffe und nicht-systematisches Vorgehen beschleunigen den Prozess der Softwarealterung. Es wird immer aufwendiger, Änderungen an der Software vorzunehmen.
                </p>
                <p>Demzufolge werden Ideen zur systematischen und automatisierten Verjüngung von Software erforscht und erprobt: Refactoring-Tools, beispielsweise für Java in 
                    <hi rend="italic">Eclipse</hi>, 
                    <hi rend="italic">Python Rope</hi>, oder aber auch für HTML und CSS (Mazinanian/Tsantalis 2017, Harold 2008), wurden entwickelt. Sogenannte „Prediction“- Modelle werden ermittelt, um Softwareevolution besser verstehen zu können und vor allem dem Problem der „Legacy software“ zu begegnen (Goltz et al. 2015, Paech et al. 2016).
                </p>
            </div>
            <div type="div1" rend="DH-Heading1">
                <head>Software Herausforderungen in der DH Praxis</head>
                <p>
                    <anchor xml:id="l9dlh0zgqh1u"/>Diese teilweise schon seit Jahrzehnten bekannten Erkenntnisse aus dem Software Engineering haben für die DH eine besondere Relevanz, da die Projekte hier wesentlich kleinere Budgets, oftmals kurze Projektlaufzeiten und andere Unsicherheiten haben. Aus unserer Erfahrung wird Softwareentwicklung in den DH häufig sehr informell gehandhabt. Diesbezüglich nachhaltiger zu werden, haben unter anderem Czmiel (2017), Schrade (2017) oder Kasper/Grüntgens (2017) gefordert. Nicht nur der Entwicklungsprozess von DH-Software muss längerfristig gedacht werden (Hattrick 2016), auch der Kontext, in dem die Software entsteht und besteht, beeinflusst deren Entwicklung und Veränderung. 
                </p>
                <p>Erstens ist es nicht ungewöhnlich, dass Projekte in den DH von einer einzigen Person technisch umgesetzt werden, wie es etwa im Falle von Dissertationsprojekten typisch ist. Der entstandene Code ist bei Projektende lauffähig, es kann aber nicht vorausgesetzt werden, dass dieser auf einen langfristigen Einsatz ausgelegt ist und entsprechend gewissenhaft programmiert und dokumentiert ist. Forschungsergebnisse sind im Projektkontext meist wichtiger als die Qualität der entwickelten Software. Generell bedeutet ein Projektende nicht die Übergabe eines Produktes an einen Kunden, es bedeutet vielmehr: Die Finanzierung läuft aus und der/die Entwickler/in verlässt das Projekt. Was zurückbleibt, ist Software, die von anderen gewartet werden muss. Dazu ist es notwendig, die Dokumentation und Systemarchitektur zu verstehen, sich in den Fremdcode einzuarbeiten. Veränderungen am Code können oft nicht mehr ihrer ursprünglichen Intention entsprechend vorgenommen werden. Die Wartung wird aufwendig und zeitintensiv. Das heißt, die Organisationsstrukturen des Forschungsbetriebes beeinflussen die Alterung von Software.</p>
                <p>Zweitens bringen die komplexen Anforderungen der Forschungsdaten nicht-klassische Lösungsansätze mit sich. Mit diesen Ansätzen vertraute Entwickler/innen sind schwer zu finden und zu halten, Einarbeitungsphasen dauern lange. Besonders augenfällig wird das am in den DH weit verbreiteten Gebrauch von X-Technologien. Sie werden immer mehr zur Nischenanwendung. Während die Definitionen von XSLT 1.0 und XPath 1.0 noch von einer größeren Breite von Softwareprodukten implementiert wurden, sogar Teil der Browser wurden, gibt es nur noch wenige Implementationen der Weiterentwicklungen XSLT 2.0 und 3.0. Auch die Menge verwendbarer XML-Datenbanksysteme ist heute geringer als noch vor einigen Jahren. In den DH entwickelte Softwarelösungen sind also speziell auf die Bedürfnisse des Gegenstandes ausgelegt und stellen keine Standardlösungen dar. Sie brauchen spezifisches Know-how, um gewartet werden zu können. Fehlt dieses, beziehungsweise ist es nur mangelhaft vorhanden, droht die Software zum unbrauchbaren Altsystem zu verkommen.</p>
                <p>DH-Software verlangt drittens besondere Zuwendung, wenn der Code gleichzeitig die Forschungsergebnisse interpretiert. Wenn die Forschungsleistung also nicht allein in den Daten liegt, braucht es individuelle Wartungslösungen. Eine Digitale Edition kann beispielsweise als die Gesamtheit von Daten, Systemarchitektur, Anwendung und GUI verstanden werden (Andrews/Zundert 2018). Diese Interpretationsleistung als Teil der Forschung muss bei allen Phänomenen der Veränderung an der Edition mitbedacht werden. Die Gefahr ist groß, dass nach einiger Zeit das Argument durch Softwareanpassungen verwässert oder im schlimmsten Fall nicht mehr nachvollziehbar ist und für die Forschung unbrauchbar wird. </p>
                <p>Zusammenfassend sehen wir in der nicht langfristigen Finanzierung, der hohen Fluktuation an Personen, der Notwendigkeit von Speziallösungen und im Forschungsgegenstand selbst erhöhten Bedarf an Maßnahmen, um unsere Softwareprojekte lauffähig zu halten. </p>
            </div>
            <div type="div1" rend="DH-Heading1">
                <head>Anti-Aging Maßnahmen im Projekt monasterium.net</head>
                <p>
                    <anchor xml:id="l0ghvg7jvhzc"/>Seit 2008 basiert die Urkundenplattform 
                    <hi rend="italic">monasterium.net</hi> auf 
                    <hi rend="italic">eXist-db</hi> als Applikationsserver und Datenbank. Die Plattform wurde hauptsächlich von drei aufeinanderfolgenden Hauptentwicklern programmiert. Um die Software zu modularisieren, wurde seit 2011 das 
                    <hi rend="italic">mom-ca</hi>-Framework entwickelt, eine Webapplikation in XRX-Architektur (XQuery, REST, XForms). Die Architektur galt damals in Verbindung mit XML-Datenbanken als Empfehlung, wird allerdings in der modernen Webentwicklung kaum mehr eingesetzt. Mit Auslaufen eines Projektes 2014 verließ der letzte Entwickler mit Überblick über das Gesamtsystem das Projekt. Zuvor wurde der Gesamtcode in ein öffentliches Repository überführt. Wissen und Intentionen gingen jedoch verloren. 
                    <anchor xml:id="docs-internal-guid-a7aa97fe-b288-2e50-46"/>Wir, als das aktuelle, größtenteils projektfinanzierte Entwicklerteam, beschäftigen uns nun aktiv damit, wie der derzeitige Code-Bestand unter unsteten Umständen wartbar und aktuell gehalten werden kann. Im Folgenden beschreiben wir vier Anti-Aging-Maßnahmen, die einerseits Refactoring (das Überarbeiten des Codes), aber auch ganz grundsätzliche Umstellungen des Entwicklungsworkflows betreffen. 
                </p>
                <div type="div2" rend="DH-Heading2">
                    <head>Softwareverwaltung durch 
                        <hi rend="italic">Git</hi> und Nutzung der Services von 
                        <hi rend="italic">GitHub</hi>.
                    </head>
                    <p>Sowohl Entwicklung als auch Dokumentation erfolgen über ein öffentliches 
                        <hi rend="italic">GitHub</hi>-Repository<ref target="ftn2" n="2"/>. Die dadurch verfügbaren Möglichkeiten der Versionsverwaltung, des Bugtracking und des Code Review werden genutzt, um die Qualität des Codes zu verbessern und diesen transparent und nachvollziehbar zu entwickeln.
                    </p>
                </div>
                <div type="div2" rend="DH-Heading2">
                    <head>Einrichtung einer Testumgebung. </head>
                    <p>Jede Neuentwicklung wird, vor ihrer Übernahme in das Produktivsystem anhand eines festgelegten Testszenarios evaluiert. Durch die Spiegelung des Livesystems auf einem Testserver soll reales Systemverhalten reproduziert werden. Fehler können so vorzeitig entdeckt und behoben werden.</p>
                </div>
                <div type="div2" rend="DH-Heading2">
                    <head>Refactoring von HTML und CSS.</head>
                    <p>Die Verwendung eines auf den Konzepten von Material Design<ref target="ftn3" n="3"/> basierenden CSS-Frameworks garantiert ein konsistentes Gesamtdesign von 
                        <hi rend="italic">monasterium.net</hi>. Teile des Benutzerinterfaces werden dadurch modularisiert und leichter anpassbar. Die Verwendung eines Präprozessors und das Einführen einer Namenskonvention sollen die Wartbarkeit, das Auffinden von Fehlern und die Umsetzung neuer Features erleichtern.
                    </p>
                </div>
                <div type="div2" rend="DH-Heading2">
                    <head>Entwicklung einer RESTful API zwischen Client und Datenbank.</head>
                    <p>Die zukünftige Kommunikation zwischen Client und Datenbank übernimmt eine neudefinierte REST-API. 
                       Die Datenabfrage aus der XML-Datenbank erfolgt noch per XQuery, zurückgeliefert werden wahlweise in XML oder JSON serialisierte Daten. Diese Form des Reengineerings gewährt eine definierte, standardisierte Verarbeitungsweise sowie die Weiternutzung und Kombination multipler Datenquellen. Die Abstraktion von Datenbank, Programmlogik und Benutzeroberfläche erleichtert so in Zukunft deren entkoppelte Anpassung oder Austausch.
                    </p>
                </div>
            </div>
            <div type="div1" rend="DH-Heading1">
                <head>Fazit</head>
                <p>Softwarealterung ist nicht nur in der Softwareindustrie eine aktuelle und fordernde Problematik. Auch für DH-Forschungsinfrastrukturen ist diesbezüglich ein gezielter Umgang gefragt, um Software fit zu halten. Unwissenheit hinsichtlich der Wartung einer Software kann schlimmstenfalls zu einer zukünftigen Unbrauchbarkeit der Forschungsergebnisse führen. Eine dahingehende Bewusstseinsbildung kann über die empirische Betrachtung vorhandener Praktiken und Lösungswege geschehen.</p>
                <p>Anhand von 
                    <hi rend="italic">monasterium.net </hi>haben wir exemplarisch mögliche Verjüngungsmaßnahmen dargestellt. Das Projekt eignet sich als Fallbeispiel, da seine Software eine über zehnjährige Laufzeit aufweist. Geringes Projektbudget und häufiger Personalwechsel mit daraus resultierenden Wissensverlusten haben die Codebasis gezeichnet. Das Projekt zeigt, dass Nachvollziehbarkeit des Entwicklungsprozesses, systematisches und standardisiertes Vorgehen, Modularisierung von Softwarekomponenten sowie kontinuierliches Testing in die Evolution von Software gewinnbringend eingreifen können.
                </p>
                <p>
                    <anchor xml:id="docs-internal-guid-a7aa97fe-b282-8b3f-85"/>Die Verantwortung kann allerdings nicht allein bei den Entwickler/innen liegen. Um Wissensverluste vorzubeugen, müssen langfristige Strukturen aufgebaut und finanziell abgesichert werden. Es muss Teil der Förderungspolitik werden, die Unausweichlichkeit der Softwarealterung zu bedenken. Sollen Entwicklungen auch nach fünf Jahren noch benutzbar sein, muss der Aufwand der nachhaltigen Entwicklung und Wartung in der Antragsplanung verankert werden.
                </p>
            </div>
        </body>
        <back>
         <div type="notes">
            <note xml:id="ftn1" n="1"> Stack Overflow ist eine Online Community, zur gegenseitigen Unterstützung und zur Wissensgenerierung bei Fragen zur Softwareentwicklung: stackoverflow.com</note>
            <note xml:id="ftn2" n="2"> github.com/icaruseu/mom-ca</note>
            <note xml:id="ftn3" n="3"> material.io/guidelines/</note>
         </div>
         <div type="bibliogr">
                <listBibl>
                    <head>Bibliographie</head>
                    <bibl>
                        <hi rend="bold">Andrews, Tara / Zundert, Joris van</hi> (2018): “What are you Trying to Say? The Interface as an Integral Element of Argument”, in: Bleier, Roman et al. (eds.): 
                        <hi rend="italic">Digital Scholarly Editions as Interfaces </hi>(=Schriften des Instituts für Dokumentologie und Editorik). Norderstedt: Books on Demand.
                    </bibl>
                    <bibl>
                        <hi rend="bold">Czmiel, Alexander</hi> (2017): “Funktionalität Digitaler Editionen“, in: 
                        <hi rend="italic">DHd 2017. Digitale Nachhaltigkeit. Konferenzabstracts.</hi> Bern 138-141. 
                        <ref target="http://www.dhd2017.ch/wp-content/uploads/2017/02/Abstractband_ergaenzt.pdf">http://www.dhd2017.ch/wp-content/uploads/2017/02/Abstractband_ergaenzt.pdf</ref> [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Demeyer, Serge / Ducasse, Stéphane / Nierstrasz, Oscar</hi> (2013): 
                        <hi rend="italic">Object-Oriented Reengineering Patterns</hi>. Bern: Square Bracket Associates. 
                        <ref target="http://scg.unibe.ch/download/oorp/OORP.pdf">http://scg.unibe.ch/download/oorp/OORP.pdf</ref>
                        [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Engels, Gregor et al. </hi>(2009) "Design for Future: Legacy-Probleme von morgen vermeidbar?", in: 
                        <hi rend="italic">Informatik Spektrum </hi>32, 5: 393-397. https://doi.org/10.1007/s00287-009-0356-3 [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Godfrey, Michael W. / German, Daniel M.</hi> (2008): “The Past, Present, and Future of Software Evolution”, in: 
                        <hi rend="italic">Proceedings of the 2008 Frontiers of Software Maintenance.</hi>
                    </bibl>
                    <bibl>New York: IEEE 129-138. 
                        <ref target="https://doi.org/10.1109/FOSM.2008.4659256">https://doi.org/10.1109/FOSM.2008.4659256</ref> [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Goltz, Ursula et al.</hi> (2015): “Design for future: managed software evolution”, in: 
                        <hi rend="italic">Computer Science - Research and Development 30, 3-4</hi>: 321-331. https://doi.org/10.1007/s00450-014-0273-9 [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Harold, Rusty Elliotte</hi> (2008): 
                        <hi rend="italic">Refactoring HTML. Improving the Design of Existing Web Applications</hi>. Upper Saddle River, NJ: Addison-Wesley.
                    </bibl>
                    <bibl>
                        <hi rend="bold">Hattrick, Simon</hi> (2016): Research Software Sustainability. Report on a Knowledge Exchange Workshop. JISC:
                        <ref target="http://repository.jisc.ac.uk/6332/1/Research_Software_Sustainability_Report_on_KE_Workshop_Feb_2016_FINAL.pdf">http://repository.jisc.ac.uk/6332/1/Research_Software_Sustainability_Report_on_KE_Work
                            shop_Feb_2016_FINAL.pdf
                        </ref> [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Kasper, Dominik / Grüntgens, Max</hi> (2017): “Nachhaltige Konzeptionsmethoden für Digital Humanities Projekte am Beispiel der Goethe-Propyläen“, in: 
                        <hi rend="italic">DHd 2017. Digitale Nachhaltigkeit. Konferenzabstracts.</hi> Bern 165-168. 
                        <ref target="http://www.dhd2017.ch/wp-content/uploads/2017/02/Abstractband_ergaenzt.pdf">http://www.dhd2017.ch/wp-content/uploads/2017/02/Abstractband_ergaenzt.pdf</ref> [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Lehman, Meir M.</hi> (1980): “Programs, life cycles, and laws of software evolution”, in: 
                        <hi rend="italic">Proceedings of the IEEE 68, 9: 1060-1076.</hi><ref target="https://doi.org/10.1109/PROC.1980.11805">https://doi.org/10.1109/PROC.1980.11805</ref>
                        [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Mazinanian, Davood / Tsantalis, Nikolaos</hi> (2017): “CCSDev: Refactoring duplication in Cascading Style Sheets”, in: 
                        <hi rend="italic">Proceedings of the 39th International Conference on Software Engineering Companion. </hi>New York: IEEE 63-66. 
                        <ref target="https://doi.org/10.1109/ICSE-C.2017.7">https://doi.org/10.1109/ICSE-C.2017.7</ref> [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Paech, Barbara et al.</hi> (2016): “Empirische Forschung zu Software-Evolution”, in: 
                        <hi rend="italic">Informatik Spektrum 39, 3</hi>: 186-193. 
                        <ref target="https://doi.org/10.1007/s00287-015-0910-0">https://doi.org/10.1007/s00287-015-0910-0
                        </ref> [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Parnas, David L.</hi> (1994): “Software Aging”, in: 
                        <hi rend="italic">Proceedings of 16th International Conference on Software Engineering. </hi>New York: IEEE 279-287. 
                        <ref target="https://doi.org/10.1109/ICSE.1994.296790">https://doi.org/10.1109/ICSE.1994.296790</ref> [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Schrade, Torsten</hi> (2017): “Nachhaltige Softwareentwicklung in den Digital Humanities. Konzepte und Methoden“, in: 
                        <hi rend="italic">DHd 2017. Digitale Nachhaltigkeit. Konferenzabstracts.</hi> Bern 168-171. 
                        <ref target="http://www.dhd2017.ch/wp-content/uploads/2017/02/Abstractband_ergaenzt.pdf">http://www.dhd2017.ch/wp-content/uploads/2017/02/Abstractband_ergaenzt.pdf</ref> [letzter Zugriff 24. September 2017].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Thaller, Georg E.</hi> (2000): ISO 9001: 
                        <hi rend="italic">Software-Entwicklung in der Praxis.</hi> Hannover: Heise.
                    </bibl>
                </listBibl>
            </div>
      </back>
    </text>
</TEI>
